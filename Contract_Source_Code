/**
 *Submitted for verification at BscScan.com on 2025-08-25
*/

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

/**
 * @dev Interface of the ERC20 standard as defined in the EIP.
 */
interface IERC20 {
    function totalSupply() external view returns (uint256);
    function balanceOf(address account) external view returns (uint256);
    function transfer(address recipient, uint256 amount) external returns (bool);
    function allowance(address owner, address spender) external view returns (uint256);
    function approve(address spender, uint256 amount) external returns (bool);
    function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);
    event Transfer(address indexed from,address indexed to,uint256 value);
    event Approval(address indexed owner,address indexed spender,uint256 value);
}

/**
 * @dev Provides information about the current execution context.
 */
abstract contract Context {
    function _msgSender() internal view virtual returns (address) {
        return msg.sender;
    }
}

/**
 * @dev Implementation of ERC20 standard
 */
contract ERC20 is Context, IERC20 {
    mapping(address => uint256) private _balances;
    mapping(address => mapping(address => uint256)) private _allowances;

    uint256 private _totalSupply;

    string private _name;
    string private _symbol;

    constructor(string memory name_, string memory symbol_){
        _name = name_;
        _symbol = symbol_;
    }

    function name() public view returns(string memory){
        return _name;
    }

    function symbol() public view returns(string memory){
        return _symbol;
    }

    function decimals() public pure returns(uint8){
        return 18;
    }

    function totalSupply() public view override returns(uint256){
        return _totalSupply;
    }

    function balanceOf(address account) public view override returns(uint256){
        return _balances[account];
    }

    function transfer(address recipient,uint256 amount) public virtual override returns(bool){
        _transfer(_msgSender(),recipient,amount);
        return true;
    }

    function allowance(address owner,address spender) public view virtual override returns(uint256){
        return _allowances[owner][spender];
    }

    function approve(address spender,uint256 amount) public virtual override returns(bool){
        _approve(_msgSender(),spender,amount);
        return true;
    }

    function transferFrom(address sender,address recipient,uint256 amount) public virtual override returns(bool){
        _transfer(sender,recipient,amount);
        uint256 currentAllowance = _allowances[sender][_msgSender()];
        require(currentAllowance >= amount,"ERC20: transfer amount exceeds allowance");
        _approve(sender,_msgSender(),currentAllowance - amount);
        return true;
    }

    function _transfer(address sender,address recipient,uint256 amount) internal virtual{
        require(sender != address(0),"ERC20: transfer from zero address");
        require(recipient != address(0),"ERC20: transfer to zero address");

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount,"ERC20: transfer amount exceeds balance");
        _balances[sender] = senderBalance - amount;
        _balances[recipient] += amount;

        emit Transfer(sender,recipient,amount);
    }

    function _mint(address account,uint256 amount) internal virtual{
        require(account != address(0),"ERC20: mint to zero address");

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0),account,amount);
    }

    function _approve(address owner,address spender,uint256 amount) internal virtual{
        require(owner != address(0),"ERC20: approve from zero address");
        require(spender != address(0),"ERC20: approve to zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner,spender,amount);
    }
}

/**
 * @dev Ownable contract
 */
abstract contract Ownable is Context {
    address private _owner;

    event OwnershipTransferred(address indexed previousOwner,address indexed newOwner);

    constructor(address initialOwner){
        _owner = initialOwner;
        emit OwnershipTransferred(address(0),initialOwner);
    }

    function owner() public view returns(address){
        return _owner;
    }

    modifier onlyOwner(){
        require(owner() == _msgSender(),"Ownable: caller is not the owner");
        _;
    }

    function transferOwnership(address newOwner) public virtual onlyOwner{
        require(newOwner != address(0),"Ownable: new owner is zero address");
        emit OwnershipTransferred(_owner,newOwner);
        _owner = newOwner;
    }
}

/**
 * @title AVG Token
 */
contract AVG is ERC20, Ownable {
    event TokenDeployed(address owner,uint256 supply);

    constructor()
        ERC20("AGILAVETRI GROUPS","AVG")
        Ownable(msg.sender)
    {
        uint256 initialSupply = 1_000_000_000 * (10 ** decimals());
        _mint(msg.sender,initialSupply);
        emit TokenDeployed(msg.sender,initialSupply);
    }
}
